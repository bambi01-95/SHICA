%{
#ifndef PARSER_C
#define PARSER_C

#define YYSTYPE oop

YYSTYPE result;

int newline = 1;

oop ZERO_PTR = (oop)(intptr_t)0;
oop ONE_PTR = (oop)(intptr_t)1;

#define PtrToInt(x) ((intptr_t)(x))
%}


start	= bln d:define 	{ result = d }

define  = t:STATE i:id s:state                { $$ = setState(i,s)  }
		| "trans" - trans
		| ADVICE   i:id b:block { $$ = newAdvice(i,b) }
		| POINTCUT i:id j:jointps { $$ = newPointcut(i,j) }
		| STRUCT i:id  p:child { $$ = newSetType(i,p,newline) }
		| defEvent 
        | t:TYPE   i:id p:params s:stmtbl     { $$ = newSetVar(t,i,newFunction(p,s),newline) } 
        | t:TYPE   i:id ASSIGN x:exp		  { $$ = newSetVarG(t, i, x,newline);}
        | RUN      i:id                       { $$ = newRun(newGetVar(i,newline)) }
        | !.                                  { $$ = newEND() }
	    | < (!eol &. .)* >                    { fatal("line %d syntax error: [%s]",newline, yytext); }

trans   = STAR COMMA ( STAR b:block { $$ = newTransAspect(nil,nil,b); printf("1\n"); }
					 | i:id b:block { $$ = newTransAspect(nil,i,b) ; printf("2\n");})
		| i:id COMMA (STAR b:block  { $$ = newTransAspect(i, nil,b); printf("3\n"); }
		             |j:id b:block  { $$ = newTransAspect(i,  j,b) ; printf("4\n");})


jointps  = LBRACE p:mkNil
		( bln !RBRACE j:jointp COMMA { p = newPair(j, p) }
	    )+
		bln RBRACE				{ $$ = p }

jointp   = BEF i:id  { $$ = newJointp(BEFORE,i) }
		| AFT i:id   { $$ = newJointp(AFTER,i)  }
		| AROUD i:id { $$ = newJointp(AROUND,i) }

child	= LBRACE p:mkNil
		( bln !RBRACE t:TYPE i:id SEMI{ p = newPair(newPair(t,i), p) }
	    )+
		bln RBRACE				{ $$ = p }

state   = LBRACE s:mkState
	  (
	    bln !RBRACE
	    e:event                     { State_append(s, e) }
	  )+
	  bln RBRACE			{ $$ = s }

mkState =                                   { $$ = newState() }

event   = i:id p:eventparams b:block             { $$ = newEvent(i,p,b) }
		| e:defEvent                          { $$ = e }
        | t:TYPE  i:id  ASSIGN  x:exp       { $$ = newSetVarL(t, i, x,newline);}
        | t:TYPE  i:id b:bracket ASSIGN x:list NLINE { $$ = newSetArray(t,i,b,x,newline); }
		| i:id a:args		{ if(getType(get(i,Symbol,value))!=DupEvent){fatal("line %d: definition error",newline);};$$ = newCall(a, i, newline); } 

defEvent = EVENT n:id ASSIGN i:id ( p:eventparams       b:block  { $$ = newSetVarEvent(n,newEvent(i,p,b),newline) }
								  | LPAR p:mkNil - RPAR b:mkNil  { $$ = newSetVarEvent(n,newEvent(i,p,b),newline) })

stmt	= PRINT a:args      { $$ =  newPrint(a,newline); }
	    | IF LPAR c:exp RPAR s:stmtbl
	      bln ELSE t:stmtbl            	        { $$ = newIf(c, s, t,newline) }
	    | IF    LPAR c:exp RPAR s:stmtbl	{ $$ = newIf(c, s, sys_false,newline) }
	    | WHILE LPAR c:exp RPAR s:stmtbl	{ $$ = newWhile(c, s, newline) } 
        | FOR LPAR (i:expr | i:mkNil) SEMI (e:exp | e:mkNil) SEMI (u:expr|u:mkNil) RPAR s:stmtbl { $$ = newFor(i,e,u,s,newline) }
        | CONTINUE NLINE                    { $$ = newContinue() }
        | BREAK    NLINE                    {  $$ = newBreak() }
        | RETURN - e:exp                      { $$ = newReturn(e,newline) }
        | STATE i:id                   { $$ = newRun(i) }
	    | x:expr                            { $$ = x  }
	    | !.                                { $$ = nil } 
	    | < (!eol &. .)* >                  { fatal("line %d syntax error: [%s]",newline, yytext); }

stmtbl = block 
       | stmt


block   =  LBRACE b:mkBlock 
	  (
	    bln !RBRACE
	    s:stmt                      { Block_append(b, s) }
	  )+
	  bln RBRACE			{ $$ = b }

mkBlock =                               { $$ = newBlock() }

expr	= assign 

assign  = (t:TYPE | t:mkNil) i:id (ASSIGN x:exp	    { $$ = newSetVar(t, i, x,newline);}
                                  |ADDEQU x:exp     { $$ = newSetVar(t, i, newBinop(ADD,x,newGetVar(i,newline),newline),newline)} 
                                  |SUBEQU x:exp     { $$ = newSetVar(t, i, newBinop(SUB,x,newGetVar(i,newline),newline),newline)} 
                                  |MULEQU x:exp     { $$ = newSetVar(t, i, newBinop(MUL,x,newGetVar(i,newline),newline),newline)} 
                                  |DIVEQU x:exp     { $$ = newSetVar(t, i, newBinop(DIV,x,newGetVar(i,newline),newline),newline)} 
                            )
        | (t:TYPE | t:mkNil) i:id b:bracket ASSIGN (x:list | x:exp) { $$ = newSetArray(t, i,b, x,newline);}
        | func
		| i:ident "." s:sym         { $$ = newGetElement(i,s,newline) }
        

bracket   =  LSQP  e:exp RSQP { printf("[]\n");$$ = e }


list  = LBRACE b:mkBlock bln
	  ( s:exp		{ Block_append(b, s) }
	    (bln COMMA bln s:exp		{ Block_append(b, s) }
	    )*
	  )+
 	  bln RBRACE			{ $$ = b }

	    
exp     = logadd
   


params	= LPAR p:mkNil
	  ( t:TYPE i:id			    { p = newPair(newPair(t,i), p) }
	    ( COMMA t:TYPE i:id		{ p = newPair(newPair(t,i), p) }
	    )*
	  )?
 	  RPAR				{ $$ = p }

eventparams	= LPAR p:mkNil
	  ( t:TYPE i:id	c:mkNil (COLON c:exp)?		    { p = newPair(newEventParam(t,i,c), p) }
	    ( COMMA t:TYPE i:id	c:mkNil (COLON c:exp)?	{ p = newPair(newEventParam(t,i,c), p) }
	    )*
	  )?
 	  RPAR				{ $$ = p }

mkNil	= 				{ $$ = nil }

logadd  = lhs:logmul ( LOGOR rhs:logmul { lhs = newBinop(OR,lhs,rhs,newline) })* { $$ = lhs }

logmul  = lhs:bitadd (LOGAND rhs:bitadd { lhs = newBinop(AND,lhs,rhs,newline) })* { $$ = lhs }

bitadd  = lhs:eqop ( BITOR rhs:eqop    { lhs = newBinop(BOR,lhs,rhs,newline) }
					 | BITAND rhs:eqop { lhs = newBinop(BAND,lhs,rhs,newline) }
					 )* { $$ = lhs }

eqop    = lhs:ineq ( EQUAL rhs:ineq	{ lhs = newBinop(EQ, lhs, rhs,newline) }
	  	   | NOTEQ rhs:ineq	{ lhs = newBinop(NE, lhs, rhs,newline) }
	  	  )*			{ $$ = lhs }

ineq    = lhs:shift ( GREATER rhs:shift	{ lhs = newBinop(GT, lhs, rhs,newline) }
	          | GREATEQ rhs:shift	{ lhs = newBinop(GE, lhs, rhs,newline) }
	          | LESSEQ  rhs:shift	{ lhs = newBinop(LE, lhs, rhs,newline) }
	          | LESS    rhs:shift	{ lhs = newBinop(LT, lhs, rhs,newline) }
	  	  )*			{ $$ = lhs }

shift   = lhs:add ( LSHIFT rhs:add	{ lhs = newBinop(LSH, lhs, rhs,newline) }
	              | RSHIFT rhs:add	{ lhs = newBinop(RSH, lhs, rhs,newline) }
	  	  )*			{ $$ = lhs }

add	= lhs:mul ( PLURS   rhs:mul	{ lhs = newBinop(ADD, lhs, rhs,newline) }
	  	  | MINUS  rhs:mul	{ lhs = newBinop(SUB, lhs, rhs,newline) }
	  	  )*			{ $$ = lhs }


mul	= lhs:prefix ( STAR  rhs:prefix	{ lhs = newBinop(MUL, lhs, rhs,newline) }
	  	     | SLASH rhs:prefix	{ lhs = newBinop(DIV, lhs, rhs,newline) }
	  	     | PCENT rhs:prefix	{ lhs = newBinop(MOD, lhs, rhs,newline) }
	  	     )*			{ $$ = lhs }

prefix	= MINUS x:value		{ $$ = newUnyop(NEG, x,newline) }
        | INCRE i:id     { $$ = newUnyop(BINC, newGetVar(i,newline),newline) }
        | DECRE i:id     { $$ = newUnyop(BDEC, newGetVar(i,newline),newline) }
        | postfix

postfix = i:id INCRE - { $$ = newUnyop(AINC, newGetVar(i,newline),newline) }
        | i:id DECRE - { $$ = newUnyop(ADEC, newGetVar(i,newline),newline) }
        | value 


args	= LPAR a:mkNil
	  ( i:exp			{ a = newPair(i, a) }
	    ( COMMA i:exp		{ a = newPair(i, a) }
	    )*
	  )?
 	  RPAR				{ $$ = a }

value	= QUOTE  character    QUOTE -  
        | DQUOTE string DQUOTE  -
		| float_  
	    | integer   
		| sym
 
sym     = LPAR lhs:exp   RPAR		{ $$ = lhs }
		| i:ident "." s:sym         { $$ = newGetElement(i,s,newline) }
		| func
	    | i:id				{ $$ = newGetVar(i,newline) }

func    = i:id a:args		{ $$ = newCall(a, i, newline); }      
		| "init" - i:id a:args	{ $$ = newEventCall(a, i, newline); }

float_	= < ( [0-9]+            expnt
	    | [0-9]+ '.' [0-9]* expnt?
	    | [0-9]* '.' [0-9]+ expnt?
	    ) > -			{ $$ = newFloat(yytext,newline) }

expnt	= 'e' [-+]? [0-9]+

string  = < (!"\"" .)* >  -        { $$ = newString(yytext) }
character = alpha                  { $$ = _newStrChar(yytext)}
integer	= < [0-9]+ > - 		       { $$ = newInteger(yytext,newline) }
id	= < alpha alnum* > -	       { $$ = intern(yytext);  }
ident	= < alpha alnum* > 	       { $$ = intern(yytext);  }

alpha	= [a-zA-Z_]
alnum	= [a-zA-Z_0-9] | '_'

-	= space*
space	= [ \t]
	    |  '//' (![\n\r] .)*


bln	= blank*
blank	= [ \t\r]
        | NLINE 
	    | '//' (![\n\r] .)* 

NLINE   = "\n"  { ++newline }


eol	= [\r\n]

TYPE    = (c:CONST | c:MkZero ) ("int" -    {$$=newTypes(PtrToInt(c),_Integer)}
								| "long"-   {$$=newTypes(PtrToInt(c),_Long)} 
								| "dou" -   {$$=newTypes(PtrToInt(c),_Double)} 
								| "flo" -   {$$=newTypes(PtrToInt(c),_Float)} 
								| "cha" -   {$$=newTypes(PtrToInt(c),_Char)} 
								| "str" -   {$$=newTypes(PtrToInt(c),_String)} 
								| "key" -   {$$=newTypes(PtrToInt(c),Key)} 
								)

CONST = "const" - {$$ = ONE_PTR;}
MkZero =  {$$ = ZERO_PTR;}
MkOne  =  {$$ = ONE_PTR; }

ASSIGN	= "=" !"="  -
ADDEQU  = "+="      -
SUBEQU  = "-="      -
MULEQU  = "*="      -
DIVEQU  = "/="      -

LOGAND     = "&&"      -
LOGOR      = "||"      -
BITAND     = "&"![=&]  -
BITOR      = "|"![=|]  -
EQUAL   = "=="	    -
NOTEQ   = "!="      -

LESS    = "<" ![=<] -
LESSEQ  = "<="      -
GREATEQ = ">="      -
GREATER = ">" ![=>] -
LSHIFT  = "<<"      -
RSHIFT  = ">>"      -

PLURS	= "+" 	    -
MINUS	= "-" 	    -

STAR	= "*" 	    -
SLASH	= "/" 	    -
PCENT	= "%" 	    -

INCRE   = "++"      
DECRE   = "--"
LPAR	= "(" 	    -
RPAR	= ")" 	    -
LSQP    = "["       -
RSQP    = "]"       -
COMMA	= ","       -
SEMI    = ";"       -
COLON   = ":"       - 
LBRACE  = "{" 	    - 
RBRACE  = "}" 	    - 
QUOTE   = "\'"      
DQUOTE  = "\""      

#//PLING	= "!" !"="  -

STATE    = "state"    !alnum - { $$ = newObject(State) }
PRINT    = "print"    !alnum -
IF       = "if"       !alnum -
ELSE     = "else"     !alnum -
WHILE    = "while"    !alnum -
FOR      = "for"      !alnum -
RUN      = "run"      !alnum -
CONTINUE = "continue"
BREAK    = "break"
RETURN   = "return"
STRUCT   = "struct"   !alnum - 
EVENT    = "event"    !alnum -

ADVICE   = "advice"   !alnum -
POINTCUT = "pointcut" !alnum -
BEF   = "before"	  !alnum -
AFT	  = "after"		  !alnum -
AROUD = "around"      !alnum -

%%;
// https://programming-place.net/ppp/contents/c/appendix/operation.html
#undef getchar
#endif