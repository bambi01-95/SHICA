%{
;
#include <ctype.h>
#include <stdio.h>
#include <assert.h>

#include "fatal.c"

int opt_d = 0;

typedef enum type_t {
    Symbol, Alt, Seq, Dot, Class, String,
    Not, And, Set, Opt, Many, More,
    Capture, Action,
} type_t;

char * type_n[] = {
    "Symbol", "Alt", "Seq", "Dot", "Class", "String",
    "Not", "And", "Set", "Opt", "Many", "More",
    "Capture", "Action",
};

union Node;
typedef union Node Node;

typedef struct Insn Insn;

#define NODE type_t type

union Node
{
    struct         { NODE;                                             };
    struct Symbol  { NODE; char *name;  Node *rule;  int index;
	                   Node **vars;  int nvars;  Insn *code;       } Symbol;
    struct Alt     { NODE; Node **elements; int size;		       } Alt;
    struct Seq     { NODE; Node **elements; int size;		       } Seq;
    struct Dot     { NODE;                            		       } Dot;
    struct Class   { NODE; unsigned char *bits;      		       } Class;
    struct String  { NODE; char *string;             		       } String;
    struct Not     { NODE; Node *exp;                		       } Not;
    struct And     { NODE; Node *exp;                		       } And;
    struct Set     { NODE; Node *id, *exp;  int index; 		       } Set;
    struct Opt     { NODE; Node *exp;                		       } Opt;
    struct Many    { NODE; Node *exp;                		       } Many;
    struct More    { NODE; Node *exp;                		       } More;
    struct Capture { NODE; Node *exp;                		       } Capture;
    struct Action  { NODE; char *text;  void (*function)(char *, int); } Action;
    struct Succeed { NODE;			 	 	       } Succeed;
    struct Fail    { NODE;			 	 	       } Fail;
    struct Push    { NODE;			 	 	       } Push;
    struct Pop     { NODE; Node *next;		 	 	       } Pop;
    struct Drop    { NODE; Node *next;		 	 	       } Drop;
};

#undef NODE

Node *_newNode(size_t size, type_t type)
{
    Node *n = calloc(1, sizeof(*n));
    n->type = type;
    return n;
}

#define newNode(TYPE)	_newNode(sizeof(struct TYPE), TYPE)

Node *newSymbol(char *name)
{
    Node *n = newNode(Symbol);
    n->Symbol.name = strdup(name);
    return n;
}

void Symbol_setRule(Node *sym, Node *exp)
{
    assert(Symbol == sym->type);
    if (sym->Symbol.rule) fatal("rule '%s' defined twice", sym->Symbol.name);
    sym->Symbol.rule = exp;
}

typedef struct Input {
    char	 *text;
    int 	  size;
    int 	  position;
} Input;

Input *Input_new(void)
{
    return calloc(1, sizeof(Input));
}

typedef struct Parser {
    Node  **symbols;
    int    nsymbols;
    Input *input;
} Parser;

Parser *gg = 0;

Parser *Parser_new(void)
{
    Parser *g = calloc(1, sizeof(*g));
    return g;
}

Node *intern(Parser *g, char *name)
{
    int lo = 0, hi = g->nsymbols-1;
    while (lo <= hi) {
	int   mid = (lo + hi) / 2;
	Node *sym = g->symbols[mid];			assert(Symbol == sym->type);
	int   cmp = strcmp(name, sym->Symbol.name);
	if      (cmp < 0) hi = mid - 1;
	else if (cmp > 0) lo = mid + 1;
	else              return sym;
    }
    g->symbols = realloc(g->symbols, sizeof(*g->symbols) * ++g->nsymbols);
    memmove(g->symbols + lo + 1, g->symbols + lo, sizeof(*g->symbols) * (g->nsymbols - lo - 1));
    return g->symbols[lo] = newSymbol(name);
}

Node *newAlt(Node *first, Node *second)
{
    Node *n = newNode(Alt);
    n->Alt.elements = calloc(2, sizeof(*n->Alt.elements));
    n->Alt.size     = 2;
    n->Alt.elements[0] = first;
    n->Alt.elements[1] = second;
    return n;
}

void Alt_append(Node *alt, Node *node)
{
    assert(Alt == alt->type);
    alt->Alt.elements = realloc(alt->Alt.elements, sizeof(*alt->Alt.elements) * ++alt->Alt.size);
    alt->Alt.elements[alt->Alt.size - 1] = node;
}

Node *newSeq(Node *first, Node *second)
{
    Node *n = newNode(Seq);
    n->Seq.elements = calloc(2, sizeof(*n->Seq.elements));
    n->Seq.size     = 2;
    n->Seq.elements[0] = first;
    n->Seq.elements[1] = second;
    return n;
}

void Seq_append(Node *seq, Node *node)
{
    assert(Seq == seq->type);
    seq->Seq.elements = realloc(seq->Seq.elements, sizeof(*seq->Seq.elements) * ++seq->Seq.size);
    seq->Seq.elements[seq->Seq.size - 1] = node;
}

Node *newDot()
{
    Node *n = newNode(Dot);
    return n;
}

Node *newClass(unsigned char *bits)
{
    Node *n = newNode(Class);
    n->Class.bits = bits;
    return n;
}

unsigned char *makeClass(char *chars)
{
    unsigned char *class = calloc(64, 1);
    for (char *p = chars;  *p;  ++p) {
	unsigned char c = *p;
	class[c / 8] |= 1 << (c % 8);
    }
    return class;
}

Node *newString(char *string)
{
    Node *n = newNode(String);
    n->String.string = strdup(string);
    return n;
}

Node *newNot(Node *exp)
{
    Node *n = newNode(Not);
    n->Not.exp = exp;
    return n;
}

Node *newSet(Node *id, Node *exp)
{
    Node *n = newNode(Set);
    n->Set.id  = id;
    n->Set.exp = exp;
    return n;
}

Node *newAnd(Node *exp)
{
    Node *n = newNode(And);
    n->And.exp = exp;
    return n;
}

Node *newOpt(Node *exp)
{
    Node *n = newNode(Opt);
    n->Opt.exp = exp;
    return n;
}

Node *newMany(Node *exp)
{
    Node *n = newNode(Many);
    n->Many.exp = exp;
    return n;
}

Node *newMore(Node *exp)
{
    Node *n = newNode(More);
    n->More.exp = exp;
    return n;
}

Node *newCapture(Node *exp)
{
    Node *n = newNode(Capture);
    n->Capture.exp = exp;
    return n;
}

Node *newAction(char *text)
{
    Node *n = newNode(Action);
    n->Action.text = strdup(text);
    return n;
}

char   *buf = 0;
int    nbuf = 0;
int  maxbuf = 0;

void begin(void)
{
    nbuf = 0;
}

void appendChar(int c)
{
    while (nbuf >= maxbuf) buf = realloc(buf, sizeof(*buf) * ++maxbuf);
    buf[nbuf++] = c;
}

void appendEscaped(int c)
{
    switch (c) {
	case 'a': appendChar('\a');  break;
	case 'b': appendChar('\b');  break;
	case 'f': appendChar('\f');  break;
	case 'n': appendChar('\n');  break;
	case 'r': appendChar('\r');  break;
	case 't': appendChar('\t');  break;
	case 'v': appendChar('\v');  break;
	default:  appendChar(c);    break;
    }
}

void appendRange(void)
{
    assert(nbuf >= 2);
    int last  = buf[--nbuf];
    int first = buf[--nbuf];
    if (first > last) fatal("character range '%c-%c' is empty", first, last);
    for (int c = first;  c <= last;  ++c) appendChar(c);
}

char *stop(void)
{
    appendChar(0);
    return buf;
}

#define YYSTYPE Node *

#define YY_INPUT(buf, result, max_size)					\
    {									\
	result= (gg->input->position >= gg->input->size)		\
	    ? 0								\
	    : ((*(buf)= gg->input->text[gg->input->position++]), 1);	\
    }

%}

start	= - ( i:id EQUAL a:alts			{ Symbol_setRule(i, a) }
	    | !.
	    | < (!EOL .)* >			{ fatal("syntax error near: %s", yytext) }
	    )

alts	= s:seq ( BAR t:seq			{ s = newAlt(s, t) }
	          ( BAR t:seq			{ Alt_append(s, t) }
		  )* )?				{ $$ = s }

seq     = p:pre ( q:pre				{ p = newSeq(p, q) }
	  	  ( q:pre			{ Seq_append(p, q) }
		  )* )?				{ $$ = p }

pre	= PLING p:pre				{ $$ = newNot(p) }
	| AND   p:pre				{ $$ = newAnd(p) }
	| i:id COLON p:pre			{ $$ = newSet(i, p) }
	| post

post	= p:primary ( QUERY			{ p = newOpt(p) }
	  	    | STAR			{ p = newMany(p) }
	  	    | PLUS			{ p = newMore(p) }
		    )*				{ $$ = p }

primary	= DOT					{ $$ = newDot() }
	| "[" begin ( !"]" range )* "]" -	{ $$ = newClass(makeClass(stop())) }
	| "'" begin ( !"'" char  )* "'" -	{ $$ = newString(stop()) }
	| '"' begin ( !'"' char  )* '"' -	{ $$ = newString(stop()) }
	| LPAREN a:alts RPAREN 	       	 	{ $$ = a }
	| LANGLE a:alts RANGLE 	       	 	{ $$ = newCapture(a) }
	| i:id !'='	      	       	     	{ $$ = i }
	| action

begin	= 					{ begin() }

range	= char ( '-' char			{ appendRange() }
	       )?

char	= "\\" < . >				{ appendEscaped(*yytext) }
	|      < . >				{ appendChar(*yytext) }
	| !.					{ fatal("EOF in string or character class") }

id	= < LETTER ALNUM* > -			{ $$ = intern(gg, yytext) }

action	= '{' < BRACES* > '}' -			{ $$ = newAction(yytext) }

BRACES	= '{' BRACES* '}' | !'}' .

DIGIT	= [0-9]
LETTER	= [-A-Z_a-z]
ALNUM	= LETTER | DIGIT

-	= SPACE*

SPACE	= [ \t\n\r] | '#' (!EOL .)*
EOL	= [\n\r]

EQUAL	= "=" -
DOT	= "." -
PLING	= "!" -
AND	= "&" -
COLON	= ":" -
PLUS	= "+" -
STAR	= "*" -
QUERY	= "?" -
BAR	= "|" -
LPAREN	= "(" -
RPAREN	= ")" -
LANGLE	= "<" -
RANGLE	= ">" -

%%;

#define foreach2(VAR, ELTS, SIZE)				\
    for (int _ = 0;  _ < (SIZE) && (VAR = (ELTS)[_]);  ++_)

#define foreach(VAR, LIST)			\
    foreach2(VAR, (LIST).elements, (LIST).size)

#define append2(ELTS, SIZE, VAL)								\
    (((ELTS) = realloc((ELTS), sizeof(*(ELTS)) * ((SIZE) + 1)), (ELTS))[(SIZE)++] = (VAL))

#define append(LIST, VAL)									\
    append2((LIST).elements, (LIST).size, VAL)

typedef unsigned char byte;

typedef enum op_t {
    PUSH, DROP, POP,
    DOT, CLASS, STRING,
    RULE, CALL, SUCCEED, FAIL,
    ACTION, BEGIN, END, UNEND, SET,
} op_t;

char *op_n[] = {
    "PUSH", "DROP", "POP",
    "DOT", "CLASS", "STRING",
    "RULE", "CALL", "SUCCEED", "FAIL",
    "ACTION", "BEGIN", "END", "UNEND", "SET",
};

typedef struct Insn
{
    op_t  op;
    void *arg;
    int   arglen;
    int   ok;
    int   ko;
} Insn;

typedef struct State
{
    void  *result;
    Node  *symbol;
    void **variables;
    void **varmem;
    int    varlen;
    int    varmax;
} State;

void action(State *state, void *cookie, char *yytext, int yyleng)
{
    printf("= {%s} [%d](%s)\n", (char *)cookie, yyleng, yytext);
}

void enter(State *state, void *cookie, char *yytext, int yyleng)
{
    Node *sym = cookie;
    printf("+ %s [%d]\n", sym->Symbol.name, sym->Symbol.nvars);
    int nvars = sym->Symbol.nvars;
    if (state->varlen + nvars >= state->varmax)
	state->varmem = realloc(state->varmem, sizeof(*state->varmem) * (state->varmax + 32));
    state->variables = state->varmem + (state->varlen += nvars);
}

void setvar(State *state, void *cookie, char *yytext, int yyleng)
{
    assert(yyleng < 0);
    assert(state->varlen + yyleng >= 0);
    state->variables[yyleng] = state->result;
    printf(": %d\n", yyleng);
}

void leave(State *state, void *cookie, char *yytext, int yyleng)
{
    Node *sym = cookie;
    printf("- %s [%d]\n", sym->Symbol.name, sym->Symbol.nvars);
    int nvars = sym->Symbol.nvars;
    state->variables = state->varmem + (state->varlen -= nvars);
    assert(state->varlen >= 0);
}

int run(Node *symbol, char *text, int start, int length)
{						assert(Symbol == symbol->type);
    struct Action {
	void (*function)(State *state, void *cookie, char *yytext, int yyleng);
	void  *cookie;
	int    textbeg, textlen;
    } *actions = 0;

    struct Context {
	int position;
	int nactions;
    } *cstack, context;

    State state = { 0, 0, 0, 0, 0, 0 };

    int csp = 0, ncstack = 32;
    cstack = malloc(sizeof(*cstack) * ncstack);
    context.position = start;
    context.nactions = 0;

# define saveAction(ACT, COOKIE,  BEG, LEN) {					\
	actions = realloc(actions, sizeof(*actions) * (context.nactions + 1));	\
	actions[context.nactions++] = (struct Action){ ACT, COOKIE, BEG, LEN };	\
    }

    struct Frame {
	Node *symbol;
	Insn *code;
	int   pc;
	int   nactions;
    } *rstack, frame;

    int rsp = 0, nrstack = 32;
    rstack = malloc(sizeof(*rstack) * nrstack);
    frame.code = symbol->Symbol.code;		assert(frame.code);
    frame.pc   = 0;

    int textbeg = 0, textend = 0;
    int result = 0;

#define push(C, X) {											\
	if (C##sp >= n##C##stack) C##stack = realloc(C##stack, sizeof(*C##stack) * (n##C##stack *= 2));	\
	C##stack[C##sp++] = (X);									\
    }

#define drop(C) {				\
	assert(C##sp);				\
	--C##sp;				\
    }

#define pop(C) ({				\
        assert(C##sp);				\
	C##stack[--C##sp];			\
    })

    for (;;) {
	//printf("%03d %s [%d,%d]\n", frame.pc, op_n[frame.code[frame.pc].op], csp, rsp);
	Insn *i = frame.code + frame.pc++;
	switch (i->op) {
	    case PUSH:		push(c, context);  frame.pc = i->ok;  continue;
	    case DROP:		drop(c);           frame.pc = i->ok;  continue;
	    case POP:		context = pop(c);  frame.pc = i->ok;  continue;
	    case DOT: {
		if (context.position < length) {
		    context.position++;
		    frame.pc = i->ok;
		    continue;
		}
		frame.pc = i->ko;
		continue;
	    }
	    case CLASS: {
		if (context.position < length) {
		    byte c = text[context.position];
		    if ((((byte *)i->arg)[c/8] >> (c % 8)) & 1) {
			context.position++;
			frame.pc = i->ok;
			continue;
		    }
		}
		frame.pc = i->ko;
		continue;
	    }
	    case STRING: {
		if (context.position + i->arglen <= length) {
		    if (0 == memcmp(text + context.position, i->arg, i->arglen)) {
			context.position += i->arglen;
			frame.pc = i->ok;
			continue;
		    }
		}
		frame.pc = i->ko;
		continue;
	    }
	    case RULE: {
		frame.pc--; // save pc of call insn
		push(r, frame);
		frame.code = ((Node *)(i->arg))->Symbol.code;
		frame.pc = 0;
		if (((Node *)(i->arg))->Symbol.nvars) {
		    saveAction(enter, i->arg, 0, 0);
		    frame.nactions = context.nactions;
		}
		continue;
		//i->op = CALL;
		//i->arglen = ((Node *)i->arg)->Symbol.nvars;
		//i->arg    = ((Node *)i->arg)->Symbol.code;				assert(i->arg);
		//goto doCall; // in case they are not consecutive
	    }
	    case CALL: { doCall:
		frame.pc--; // save pc of call insn
		push(r, frame);
		frame.code = i->arg;
		frame.pc = 0;
		continue;
	    }
	    case SUCCEED: {
		if (((Node *)(i->arg))->Symbol.nvars) {
		    if (frame.nactions == context.nactions) // no actions were added
			context.nactions--;                 // remove the enter action
		    else
			saveAction(leave, i->arg, 0, 0);
		}
		if (rsp) {
		    frame = pop(r);
		    i = frame.code + frame.pc;
		    frame.pc = i->ok;
		    continue;
		}
		result = context.position - start;
		break;
	    }
	    case FAIL: {
		if (rsp) {
		    frame = pop(r);
		    i = frame.code + frame.pc;
		    frame.pc = i->ko;
		    continue;
		}
		result = -1;
		break;
	    }
	    case ACTION: {
		saveAction(action, i->arg, textbeg, textend - textbeg);
		frame.pc = i->ok;
		continue;
	    }
	    case BEGIN: {
		textbeg = textend = context.position;
		frame.pc = i->ok;
		continue;
	    }
	    case END: {
		textend = context.position;
		frame.pc = i->ok;
		continue;
	    }
	    case UNEND: {
		textbeg = textend = 0;
		frame.pc = i->ok;
		continue;
	    }
	    case SET: {
		saveAction(setvar, 0, 0, i->arglen);
		frame.pc = i->ok;
		continue;
	    }
	}
	break;
    }

#undef pop
#undef drop
#undef push

    free(cstack);
    free(rstack);

    for (int i = 0;  i < context.nactions;  ++i) {
	static char *yytext = 0;
	static int   prevbeg = 0, prevlen = 0;
	int beg = actions[i].textbeg, yyleng = actions[i].textlen;
	if (beg != prevbeg || yyleng != prevlen) {
	    if (yyleng > 0) {
		prevbeg = beg;
		prevlen = yyleng;
		yytext = realloc(yytext, yyleng+1);
		memcpy(yytext, text + beg, yyleng);
		yytext[yyleng] = 0;
	    }
	}
	actions[i].function(&state, actions[i].cookie, yytext, yyleng);
    }

    return result;
}

Insn *insns = 0;
int  ninsns = 0;

int emit(op_t op, void *arg, int arglen, int ok, int ko)
{
    insns = realloc(insns, sizeof(*insns) * (ninsns+1));
    insns[ninsns++] = (Insn){ op, arg, arglen, ok, ko };
    return ninsns - 1;
}

int generateNode(Node *node, int ok, int ko)
{
    if (!node) return -1;
    switch (node->type) {
	case Symbol: {
	    if (!node->Symbol.rule) fatal("rule %s used but not defined", node->Symbol.name);
	    emit(RULE, node, 0, ok, ko);
	    break;
	}
	case Alt: {
	    ok = emit(DROP, 0, 0, ok, ok);
	    ko = emit(POP,  0, 0, ko, ko);
	    for (int i = node->Alt.size;  i--;) {
		ko = generateNode(node->Alt.elements[i], ok, ko);
	    }
	    emit(PUSH, 0, 0, ko, ko);
	    break;
	}
	case Seq: {
	    if (node->Seq.size > 1) {
		ok = emit(DROP, 0, 0, ok, ok);
		ko = emit(POP,  0, 0, ko, ko);
	    }
	    for (int i = node->Seq.size;  i--;) {
		ok = generateNode(node->Seq.elements[i], ok, ko);
	    }
	    if (node->Seq.size > 1) {
		emit(PUSH, 0, 0, ok, ok);
	    }
	    break;
	}
	case Dot: {
	    emit(DOT, 0, 0, ok, ko);
	    break;
	}
	case Class: {
	    emit(CLASS, node->Class.bits, 32, ok, ko);
	    break;
	}
	case String: {
	    emit(STRING, (byte *)node->String.string, strlen(node->String.string), ok, ko);
	    break;
	}
	case Not: {
	    int nok  = emit(POP,  0, 0, ko, ko);
	    int nko  = emit(DROP, 0, 0, ok, ok);
	    int here = generateNode(node->Not.exp, nok, nko);
	    emit(PUSH, 0, 0, here, here);
	    break;
	}
	case And: {
	    ok = emit(POP,  0, 0, ok, ok);
	    ko = emit(DROP, 0, 0, ko, ko);
	    int here = generateNode(node->And.exp, ok, ko);
	    emit(PUSH, 0, 0, here, here);
	    break;
	}
	case Set: {
	    ok = emit(SET, 0, node->Set.index, ok, ok);
	    generateNode(node->Set.exp, ok, ko);
	    break;
	}
	case Opt: {
	    generateNode(node->Opt.exp, ok, ok);
	    break;
	}
	case Many: {
	    int last = ninsns;
	    generateNode(node->Many.exp, ok, ok);
	    insns[last].ok = ninsns - 1;
	    break;
	}
	case More: {
	    int last = ninsns;
	    int next = generateNode(node->Many.exp, ok, ok);
	    insns[last].ok = ninsns - 1;
	    last = ninsns;
	    generateNode(node->More.exp, next, ko);
	    break;
	}
	case Capture: {
	    ok = emit(END, 0, 0, ok, ok);
	    ko = emit(UNEND, 0, 0, ko, ko);
	    ok = generateNode(node->Capture.exp, ok, ko);
	    emit(BEGIN, 0, 0, ok, ok);
	    break;
	}
	case Action: {
	    emit(ACTION, node->Action.text, strlen(node->Action.text), ok, ok);
	    break;
	}
    }
    return ninsns - 1;
}

int collectVariable(Node *id, Node *sym)
{
    Node *var;
    foreach2(var, sym->Symbol.vars, sym->Symbol.nvars)
	if (var == id) return _;
    append2(sym->Symbol.vars, sym->Symbol.nvars, id);
    return sym->Symbol.nvars - 1;
}

void collectVariables(Node *exp, Node *sym)
{
    Node *elt;
    switch (exp->type) {
	case Symbol:									break;
	case Alt:	foreach (elt, exp->Alt) collectVariables(elt, sym);		break;
	case Seq:	foreach (elt, exp->Seq) collectVariables(elt, sym);		break;
	case Dot:									break;
	case Class:									break;
	case String:									break;
	case Not:	collectVariables(exp->Not.exp, sym);				break;
	case And:	collectVariables(exp->And.exp, sym);				break;
	case Set:	exp->Set.index = -1 - collectVariable(exp->Set.id, sym);	break;
	case Opt:	collectVariables(exp->Opt.exp, sym);				break;
	case Many:	collectVariables(exp->Many.exp, sym);				break;
	case More:	collectVariables(exp->More.exp, sym);				break;
	case Capture:	collectVariables(exp->Capture.exp, sym);			break;
	case Action:									break;
    }
}

void printChar(int c)
{
    if      ('\\' == c)	 		printf("\\\\");
    else if ('"' == c)	 		printf("\\\"");
    else if (' ' <= c && c < 127) 	printf("%c", c);
    else		 	  	printf("\\x%02x", c);
}

void printClass(byte *arg, int arglen) {
    printf("[");
    int c = 0;
    while (c < 8 * arglen) {
	if (0 == ((arg[c/8] >> (c % 8)) & 1)) {
	    ++c;
	    continue;
	}
	if (c == ']' || c == '-') printf("\\%c", c++);
	else                      printChar(c++);
	if (c >= 8 * arglen) break;
	if (0 == ((arg[c/8] >> (c % 8)) & 1)) continue;
	while (c < 8 * arglen && (arg[c/8] >> (c % 8)) & 1) ++c;
	printf("-");
	printChar(c-1);
    }
    printf("]");
}

void printString(byte *arg, int arglen) {
    printf("\"");
    for (int ns = 0;  ns < arglen;  ++ns) printChar(arg[ns]);
    printf("\"");
}

void generateSymbol(Node *sym)
{
    assert(Symbol == sym->type);
    if (sym->Symbol.rule) {
	collectVariables(sym->Symbol.rule, sym);
	printf("%s [%d]\n", sym->Symbol.name, sym->Symbol.nvars);
	// int n = sym->Symbol.nvars;
	// for (int i = 0;  i < n;  ++i) printf("#define %s yyvariables[%d]\n", sym->Symbol.vars[i]->Symbol.name, -1 - i);
	insns  = 0;
	ninsns = 0;
	int ko = emit(FAIL,    sym, 0, 0, 0);
	int ok = emit(SUCCEED, sym, 0, 0, 0);
	generateNode(sym->Symbol.rule, ok, ko);
	for (int n = 0;  n < ninsns / 2;  ++n) {
	    Insn i = insns[n];
	    insns[n] = insns[ninsns - 1 - n];
	    insns[ninsns - 1 - n] = i;
	}
	for (int n = 0;  n < ninsns;  ++n) {
	    Insn *i = insns + n;
	    i->ok = ninsns - 1 - i->ok;
	    i->ko = ninsns - 1 - i->ko;
	    printf("  %03d\t%s\t", n, op_n[i->op]);
	    if (i->arg) {
		switch (i->op) {
		    case RULE:  printf("\"%s\"", ((Node *)i->arg)->Symbol.name);  	break;
		    case CLASS: printClass(i->arg, i->arglen); 				break;
		    default:	printString(i->arg, i->arglen); 			break;
		}
	    }
	    else {
		printf("0");
	    }
	    printf(", %d, %d, %d\n", i->arglen, i->ok, i->ko);
	}
	sym->Symbol.code = insns;
	printf("* %p %s\n", sym->Symbol.code, sym->Symbol.name);
	// for (int i = 0;  i < n;  ++i) printf("#undef %s\n", sym->Symbol.vars[i]->Symbol.name);
	// printf("Node __%d={.Symbol={Symbol, \"%s\", &__%d, %d, %d, %d}};\n", sym->Symbol.index, sym->Symbol.name, -1, sym->Symbol.index, 0, n);
    }
    else {
	// printf("Node __%d={.Symbol={Symbol, \"%s\", 0, %d}};\n", sym->Symbol.index, sym->Symbol.name, sym->Symbol.index);
    }
}

void generateParser(Parser *g)
{
    for (int i = 0;  i < g->nsymbols;  ++i) printf("%s\n", g->symbols[i]->Symbol.name); // declareSymbol (g->symbols[i]);
    for (int i = 0;  i < g->nsymbols;  ++i) generateSymbol(g->symbols[i]);
    // printf("Node *__symbols[%d]={", g->nsymbols);
    // for (int i = 0;  i < g->nsymbols;  ++i) printf("&__%d,", g->symbols[i]->Symbol.index);
    // printf("};\n");
    // printf("int __nsymbols=%d;\n", g->nsymbols);
}

void readFile(FILE *file, char **textp, int *sizep)
{
    size_t size = 0;
    char  *text = malloc(4096);
    for (;;) {
	ssize_t n = fread(text+size, 1, 4096, file);
	if (n < 1) break;
	size += n;
	if (n < 4096) break;
	text = realloc(text, size + 4096);
    }
    *textp = text;
    *sizep = size;
}

int main(int argc, char **argv)
{
    gg = Parser_new();

    Input *input = Input_new();
    readFile(stdin, &input->text, &input->size);

    gg->input = input;
    while (gg->input->position < gg->input->size) {
	//printf("%ld\n", ftell(stdin));
	yyparse();
    }

    generateParser(gg);

    char *text = "1 + 2 * 3 + 4; 42;";
    int start = 0, stop = strlen(text), n = 0;
    while (start < stop && (n = run(intern(gg, "start"), text, start, stop)) > 0) {
	printf("%d\t%.*s\n", n, n, text + start);
	start += n;
    }

    return 0;
}
